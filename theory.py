# 123456789  // 1 % 10 ---> 9                (единицы)
#
# 123456789   // 10 % 10 ---> 8               (десятки)
#
# 123456789  // 100 % 10 ---> 7               (сотни)
#
# 123456789  // 1000 % 10 ---> 6             (тысячи)
#
# 123456789  // 10000 % 10 ---> 5           (десятки тысяч)
#
# 123456789  // 100000 % 10 ---> 4         (сотни тысяч)
#
# 123456789  // 1000000 % 10 ---> 3       (миллионы)
#
# 123456789  // 10000000 % 10 ---> 2     (десятки миллионов)
#
# 123456789  // 100000000 % 10 ---> 1   (сотни миллионов)

#                          УСЛОВНАЯ КОНСТРУКЦИЯ IF
#
# Условные конструкции используют условные выражения и
# в зависимости от их значения направляют выполнение программы по одному из путей.
# Одна из таких конструкций - это конструкция if. Она имеет следующее формальное определение:
#
# if логическое_выражение:
#     инструкции
# [elif логическое выражение:
#     инструкции]
# [else:
#     инструкции]
#
# В самом простом виде после ключевого слова if идет логическое выражение. И
# если это логическое выражение возвращает True,
# то выполняется последующий блок инструкций,
# каждая из которых должна начинаться с новой строки и
# должна иметь отступы от начала выражения if
# (отступ желательно делать в 4 пробела или то количество пробелов, которое кратно 4):
#
language = "english"
if language == "english":
    print("Hello")
print("End")
#
#
# Поскольку в данном случае значение переменной language равно "english",
# то будет выполняться блок if, который содержит только одну инструкцию - print("Hello").
# В итоге консоль выведет следующие строки:
#
# Hello
# End
#
#
# Обратите внимание в коде на последнюю строку, которая выводит сообщение "End".
# Она не имеет отступов от начала строки,
# поэтому она не принадлежит к блоку if и будет выполняться в любом случае,
# даже если выражение в конструкции if возвратит False.
#
language = "english"
if language == "english":
    print("Hello")
    print("End")
                                 #
                                 #
                                 #  БЛОК ELSE
#
# Если вдруг нам надо определить альтернативное решение на тот случай,
# если выражение в if возвратит False, то мы можем использовать блок else:
#
language = "russian"
if language == "english":
    print("Hello")
else:
    print("Привет")
print("End")
#
# Если выражение language == "english" возвращает True, то выполняется блок if,
# иначе выполняется блок else.
# И поскольку в данном случае условие language == "english" возвращает False,
# то будут выполняться инструкция из блока else.
#
# Причем инструкции блока else также должны имет отступы от начала строки.
# Например, в примере выше print("End") не имеет отступа,
# поэтому она не входит в блок else и будет выполнятьься вне зависимости,
# чему равно условие language == "english". То есть консоль нам выведет следующие строки:
#
# Привет
# end
#
# Блок else также может иметь несколько инструкций, которые должны иметь отступ от начала строки:
#
language = "russian"
if language == "english":
    print("Hello")
    print("World")
else:
    print("Привет")
    print("мир")
                        #
                        #  ELIF

# Если необходимо ввести несколько альтернативных условий,
# то можно использовать дополнительные блоки elif, после которого идет блок инструкций.
#
language = "german"
if language == "english":
    print("Hello")
    print("World")
elif language == "german":
    print("Hallo")
    print("Welt")
else:
    print("Привет")
    print("мир")
#
# Сначала Python проверяет выражение if. Если оно равно True, то выполняются инструкции из блока if.
# Если это условие возвращает False, то Python проверяет выражение из elif.
#
# Если выражение после elif равно True, то выполняются инструкции из блока elif.
# Но если оно равно False то выполняются инструкции из блока else
#
# При необходимости можно определить несколько блоков elif для разных условий. Например:
#
language = "german"
if language == "english":
    print("Hello")
elif language == "german":
    print("Hallo")
elif language == "french":
    print("Salut")
else:
    print("Привет")
                           #
                           #
                           # Вложенные конструкции if
#
# Конструкция if в свою очередь сама может иметь вложенные конструкции if:
#
language = "english"
daytime = "morning"
if language == "english":
    print("English")
    if daytime == "morning":
        print("Good morning")
    else:
        print("Good evening")

#
# Здесь конструкция if содержит вложенную конструкцию if/else.
# То есть если переменная language равна "english",
# тогда вложенная конструкция if/else дополнительно проверяет значение переменной daytime -
# равна ли она строке "morning" ли нет. И в данном случае мы получим следующий консольный вывод:
#
# English
# Good morning
#
#
# Стоит учитывать, что вложенные выражения if также должны начинаться с отступов,
# а инструкции во вложенных конструкциях также должны иметь отступы.
# Отступы, расставленные не должным образом, могут изменить логику программы.
# Так, предыдущий пример НЕ аналогичен следующему:
#
language = "english"
daytime = "morning"
if language == "english":
    print("English")
if daytime == "morning":
    print("Good morning")
else:
     print("Good evening")
#
#
# Подобным образом можно размещать вложенные конструкции if/elif/else в блоках elif и else:
#
language = "russian"
daytime = "morning"
if language == "english":
    if daytime == "morning":
        print("Good morning")
    else:
        print("Good evening")
else:
    if daytime == "morning":
        print("Доброе утро")
    else:
        print("Добрый вечер")
                                         #
#                                      # Условный оператор if-else
#
# Мы познакомились с базовыми строительными блоками программ,
# научились писать программы, обеспечивающие ввод, обработку и вывод данных.
# Более того, мы умеем работать со строками и числами, как мы делаем это в математике.
# Теперь научимся управлять ходом выполнения программы.
#
# Программы должны уметь выполнять разные действия в зависимости от введенных данных.
# Для принятия решения программа проверяет, истинно или ложно определенное условие.
#
# В Python существует несколько способов проверки,
# и в каждом случае возможны два исхода: истина (True) или ложь (False).
#
# Проверка условий и принятие решений по результатам этой проверки называется ветвлением (branching).
# Программа таким способом выбирает, по какой из возможных ветвей ей двигаться дальше.
#
# В Python проверка условия осуществляется при помощи ключевого слова if.
#
# Рассмотрим следующую программу:

answer = input('Какой язык программирования мы изучаем?')
if answer == 'Python':
    print('Верно! Мы ботаем Python =)')
    print('Python - отличный язык!')
#
# Программа просит пользователя ввести текст и проверяет результат ввода.
# Если введенный текст равен строке «Python», то выводит пользователю текст:
#
# Верно! Мы ботаем Python =)
# Python - отличный язык!
#
# Двоеточие (:) в конце строки с инструкцией if сообщает интерпретатору Python,
# что дальше находится блок команд.
#
# В блок команд входят все строки с отступом под строкой с инструкцией if,
# вплоть до следующей строки без отступа.
#
# Если условие истинно, выполняется весь расположенный ниже блок.
# В предыдущем примере блок инструкций составляет третья и четвертая строки программы.
#
#
# Блоком кода называют объединенные друг с другом строки.
# Они всегда связаны с определенной частью программы (например, с инструкцией if).
# В Python блоки кода формируются при помощи отступов.
#
#
# Предыдущая программа выводит текст в случае, если условие истинно.
# Но если условие ложно, то программа ничего не выводит.
# Для того чтобы обеспечить возможность выполнять что-либо в случае,
# если условие оказалось ложным, мы используем ключевое слово else.

answer = input('Какой язык программирования мы изучаем?')

if answer == 'Python':
    print('Верно! Мы ботаем Python =)')
    print('Python - отличный язык!')
else:
    print('Не совсем так!')
#
# В новой программе мы обрабатываем сразу два случая: если условие истинно (пользователь ввел «Python»),
# и если условие ложно (пользователь ввел что угодно, кроме «Python»).



                                            # Отступы
#
# В некоторых языках программирования отступы — дело личного вкуса, и можно вообще обходиться без них.
# Однако в Python они – неотъемлемая часть кода.
# Именно отступ сообщает интерпретатору Python, где начинается и где заканчивается блок кода.
#
# Отступ — небольшое смещение строки кода вправо.
# В начале такой строки находятся пробелы, и поэтому она на несколько символов отстоит от левого края.
#
# Некоторым инструкциям в Python (например, инструкции if) именно блок кода сообщает,
# акие действия следует предпринять.
#
#
# После if блок кода информирует интерпретатор Python,
# как действовать, если условие истинно, и как — если оно ложно.
#
# По соглашению PEP 8, для отступа блоков кода используются 4 пробела.
# Если в среде VS Code или Wing IDE нажать на клавишу Enter после if,
# она автоматически выставит 4 пробела.
#

                                    # Операторы сравнения
#
# Можно заметить, что в проверке условия мы использовали двойное равенство (==),
# вместо ожидаемого одиночного (=).
# Не стоит путать оператор присваивания (=) с условным оператором (==).
#
# Оператор присваивания (=) присваивает переменным значения:

num = 1992
s = 'I love Python'
#
# Для проверки двух элементов на равенство Python использует удвоенный знак равно (==). Вот так:
#
# if answer == 'Python':
#     ...
#
# if name == 'Gvido':
#     ...
#
# if temperature == 40:
#     ...
#
# Путаница с операторами == и = является одной из самых распространенных ошибок в программировании.
# Эти символы используются не только в Python,
# и каждый день множество программистов используют их неправильно.
#
# В Python существует 6 основных операторов сравнения.

                      # Выражение                                     Описание
                    # if x > 7	                                    если x больше 7
                    #
                    # if x < 7                                      если x меньше 7
                    #
                    # if x >= 7                                     если x больше либо равен  7
                    #
                    # if x <= 7                                     если x меньше либо равен  7
                    #
                    # if x == 7                                     если x равен  7
                    #
                    # if x != 7                                     если x не равен  7


# Рассмотрим пример:

num1 = int(input())
num2 = int(input())

if num1 < num2:
    print(num1, 'меньше чем', num2)
if num1 > num2:
    print(num1, 'больше чем', num2)

if num1 == num2:  # используем двойное равенство
    print(num1, 'равно', num2)
if num1 != num2:
    print(num1, 'не равно', num2)


                                        # Цепочки сравнений
#
# Операторы сравнения в Python можно объединять в цепочки
# (в отличие от большинства других языков программирования,
# где для этого нужно использовать логические связки),
# например, a == b == c  или 1 <= x <= 10.
# Следующий код проверяет, находится ли значение переменной age в диапазоне от 3 до 6:
#
age = int(input())
if 3 <= age <= 6:
    print('Вы ребёнок')

# Код, проверяющий равенство трех переменных, может выглядеть так:

# if a == b == c:
    print('числа равны')
else:
    print('числа не равны')


                                        # Транзитивность


# Операция равенства является транзитивной.
# Это означает, что если a == b и b == c, то из этого следует, что a == c.
# Именно поэтому предыдущий код, проверяющий равенство трех переменных, работает, как полагается.
#
# Из курса математики вам могут быть знакомы другие примеры транзитивных операций:
#
# 1. Отношение порядка: если a > b и b > c, то a > c;
#
# 2. Параллельность прямых: если a || b и b || c, то a || b
#
# 3. Делимость: если a делиться на я b и b делаитсья на с, то a делаитсья на c
#
# Наглядно транзитивность отношения порядка можно понять на таком примере:
# если сосед слева старше вас (a>b),
# а вы старше соседа справа (b>c), то сосед слева точно старше соседа справа (a>c).
#
#
# Операция неравенства (!=), в отличие от операции равенства (==), является нетранзитивной.
# То есть из того, что a != b и b != c вовсе не следует, что a != c.
# Действительно, если вас зовут не так, как соседа слева и не так, как соседа справа, то нет гарантии,
# что у обоих соседей не окажутся одинаковые имена.
#
# Таким образом, следующий код вовсе не проверяет тот факт, что все три переменные различны:
#
# if a != b != c:
#     print('числа не равны')
# else:
#     print('числа равны')















































